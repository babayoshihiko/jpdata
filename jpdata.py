# -*- coding: utf-8 -*-
"""
/***************************************************************************
 jpdata
                                 A QGIS plugin
 Download and load various data of Japan
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-04-28
        git sha              : $Format:%H$
        copyright            : (C) 2024-2025 by Yoshihiko Baba
        email                : babayoshihiko@mac.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import (
    QSettings,
    QTranslator,
    QCoreApplication,
    Qt,
    QUrl,
)
from qgis.PyQt.QtGui import QIcon, QDesktopServices
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .jpdata_dockwidget import jpdataDockWidget
import os.path

# User defined
import os, tempfile, posixpath
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QListWidgetItem
from qgis.PyQt.QtWidgets import QAbstractItemView
from qgis.core import (
    QgsProject,
    QgsSettings,
    QgsVectorLayer,
    QgsRasterLayer,
)
from . import jpDataUtils
from . import jpDataDownloader
from . import jpDataMuni
from . import jpDataCensus
from . import jpDataLNI
from . import jpDataMesh


class jpdata:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = posixpath.join(
            self.plugin_dir, "i18n", "jpdata_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&jpdata")
        # TODO: We are going to let the user set this up in a future iteration
        # self.toolbar = self.iface.addToolBar("jpdata")
        # self.toolbar.setObjectName("jpdata")

        # print "** INITIALIZING jpdata"

        self.pluginIsActive = False
        self.dockwidget = None

        # User defined
        self._folderPath = QSettings().value("jpdata/FolderPath", "~")
        self._proxyServer = QSettings().value("jpdata/ProxyServer", "http://")
        self._LandNumInfo = jpDataUtils.getMapsFromCsv()
        self._GSI = jpDataUtils.getTilesFromCsv()
        self._downloaderStatus = ""
        self._dl_code = []  # Future plan: move _dl_code to _dl_url_zip
        self._dl_url_zip = []
        self._dl_iter = 0
        self._LW11_Prev = ""
        self._LW31_Prev = ""
        self._verbose = True
        # Create an action that triggers the folder chooser
        self.action = QAction("Choose Folder", self.iface.mainWindow())
        self.action.triggered.connect(self.chooseFolder)

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("jpdata", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        self.add_action(
            posixpath.join(self.plugin_dir, "icon.png"),
            text=self.tr("jpdata"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

    # --------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        # print "** CLOSING jpdata"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        # print "** UNLOAD jpdata"

        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&jpdata"), action)
            # self.iface.removeToolBarIcon(action)
        # remove the toolbar
        # del self.toolbar

    # --------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            # print "** STARTING jpdata"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = jpdataDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # User defined
            self._downloader = jpDataDownloader.DownloadThread()
            self._downloader.progress.connect(self.dockwidget.progressBar.setValue)
            self._downloader.finished.connect(self.download_finished)

            self.dockwidget.myPushButton2.setText(self.tr("Choose Folder"))
            self.dockwidget.myPushButton2.setToolTip(self.tr("Choose Folder"))
            self.dockwidget.myPushButton2.clicked.connect(self.chooseFolder)

            self.dockwidget.myLabelStatus.setText("")

            # Set Tab 1
            self.dockwidget.myTabWidget.setTabText(0, self.tr("LandNumInfo"))
            self.dockwidget.myPushButton11.setText(self.tr("Download"))
            self.dockwidget.myPushButton11.setToolTip(
                self.tr("Download Land Numerical Information data")
            )
            self.dockwidget.myPushButton11.clicked.connect(self.tab1DownloadAll2)
            self.dockwidget.myPushButton14.setText(self.tr("Add to Map"))
            self.dockwidget.myPushButton14.setToolTip(
                self.tr("Add Shapefile as a Layer to Map on QGIS")
            )
            self.dockwidget.myPushButton14.clicked.connect(self.tab1AddMap)
            self.dockwidget.myPushButton15.setText(self.tr("Web"))
            self.dockwidget.myPushButton15.setToolTip(
                self.tr("Open the webpage with the standard browser")
            )
            self.dockwidget.myPushButton15.clicked.connect(self.tab1Web)
            for thisLandNum in self._LandNumInfo:
                item = QListWidgetItem(thisLandNum["name_j"])
                if thisLandNum["availability"] != "yes":
                    item.setFlags(item.flags() & ~Qt.ItemIsSelectable)
                    item.setForeground(Qt.gray)
                self.dockwidget.myListWidget11.addItem(item)
            # self.tab1CheckPrefsOrRegions()
            # Users cannot choose multiple maps
            # self.dockwidget.myListWidget11.setSelectionMode(
            #    QAbstractItemView.ExtendedSelection
            # )
            self.dockwidget.myListWidget11.clicked.connect(self._LW11_clicked)
            self.dockwidget.myListWidget11.currentItemChanged.connect(
                self._LW11_currentItemChanged
            )
            self.dockwidget.myListWidget12.clicked.connect(self.tab1CheckYear)
            self.dockwidget.myListWidget12.currentItemChanged.connect(
                self.tab1CheckYear
            )
            self.dockwidget.myComboBox11.currentIndexChanged.connect(self.tab1SetLW13)
            self.myListWidget12_is_all_prefs = False
            self.myListWidget12_is_mesh1 = False
            # Users cannot choose multiple prefctures
            self.dockwidget.myListWidget12.setSelectionMode(
                QAbstractItemView.ExtendedSelection
            )
            self.dockwidget.myListWidget13.hide()

            # Set Tab 2
            self.dockwidget.myTabWidget.setTabText(1, self.tr("GSI Tiles"))
            self.dockwidget.myPushButton25.setText(self.tr("Add to Map"))
            self.dockwidget.myPushButton25.setToolTip(
                self.tr("Add GSI xyz tile server to Map on QGIS")
            )
            self.dockwidget.myPushButton25.clicked.connect(self.addTile)
            for row in self._GSI:
                self.dockwidget.myListWidget23.addItem(row["name_j"])

            # Set Tab 3
            self.dockwidget.myTabWidget.setTabText(2, self.tr("Census"))
            self.dockwidget.myLabel31.setText(self.tr("Year"))
            self.dockwidget.myComboBox31.addItem("2020")
            self.dockwidget.myComboBox31.addItem("2015")
            self.dockwidget.myComboBox31.addItem("2010")
            self.dockwidget.myComboBox31.addItem("2005")
            self.dockwidget.myComboBox31.addItem("2000")
            self.dockwidget.myComboBox31.setToolTip(
                "小地域: 2000年以降<br />5次メッシュ: 2005年以降<br />その他: 1995年以降"
            )
            self.dockwidget.myComboBox32.addItem("小地域")
            self.dockwidget.myComboBox32.addItem("3次メッシュ")
            self.dockwidget.myComboBox32.addItem("4次メッシュ")
            self.dockwidget.myComboBox32.addItem("5次メッシュ")
            self.dockwidget.myComboBox32.setToolTip(
                "小地域: 基本単位区別，町丁・字別人口<br />3次メッシュ: 1 km メッシュ<br />4次メッシュ: 500 m メッシュ<br />5次メッシュ: 250 m メッシュ"
            )
            self.dockwidget.myComboBox32.currentIndexChanged.connect(
                self._tab3_set_mesh
            )
            self.dockwidget.myPushButton31.setText(self.tr("Download"))
            self.dockwidget.myPushButton31.setToolTip(
                self.tr("Download census data by city")
            )
            self.dockwidget.myPushButton31.clicked.connect(self.tab3DownloadAll2)
            self.dockwidget.myPushButton32.setText(self.tr("Add to Map"))
            self.dockwidget.myPushButton32.setToolTip(
                self.tr("Add Shapefile as a Layer to Map on QGIS")
            )
            self.dockwidget.myPushButton32.clicked.connect(self.tab3AddMap)
            self.dockwidget.myListWidget31.clicked.connect(self._LW31_clicked)
            self.dockwidget.myListWidget31.currentItemChanged.connect(
                self._LW31_currentItemChanged
            )
            self.dockwidget.myListWidget32.setSelectionMode(
                QAbstractItemView.ExtendedSelection
            )
            self.dockwidget.myListWidget33.hide()
            self.dockwidget.myListWidget33.setSelectionMode(
                QAbstractItemView.ExtendedSelection
            )

            for code in range(1, 48):
                self.dockwidget.myListWidget31.addItem(
                    jpDataUtils.getPrefNameByCode(code)
                )

            # Tab Setting
            self.dockwidget.myTabWidget.setTabText(3, self.tr("Setting"))
            self.dockwidget.myLineEditSetting1.textEdited.connect(self.setProxyServer)
            self.dockwidget.myLineEditSetting2.textEdited.connect(self.setProxyServer)
            self.dockwidget.myLineEditSetting3.textEdited.connect(self.setProxyServer)
            if self._folderPath:
                self.dockwidget.myLabel1.setText(self._folderPath)
            else:
                self.dockwidget.myLabel1.setText(
                    self.tr("Choose folder for zip/shp files")
                )
                self.dockwidget.myTabWidget.setCurrentIndex(3)
            if self._proxyServer:
                self.dockwidget.myLineEditSetting1.setText(self._proxyServer)
            self.dockwidget.myLineEditSetting2.setToolTip(
                self.tr("User/Password are not stored")
            )
            self.dockwidget.myLineEditSetting3.setToolTip(
                self.tr("User/Password are not stored")
            )
            self.dockwidget.myPushButtonTest.hide()

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

    def addTile(self):
        selected_items = self.dockwidget.myListWidget23.selectedItems()

        for current_gsi in self._GSI:
            if current_gsi["name_j"] == str(selected_items[0].text()):
                tile_name = current_gsi["name_j"]
                tile_url = current_gsi["url"]
                zoom_min = current_gsi["zoom_min"]
                zoom_max = current_gsi["zoom_max"]
                break

        tile_url = (
            "type=xyz&url="
            + tile_url
            + "&zmax="
            + zoom_max
            + "&zmin="
            + zoom_min
            + "&crs=EPSG3857"
        )
        layer = QgsRasterLayer(tile_url, tile_name, "wms")
        if not layer.isValid():
            return
        QgsProject.instance().addMapLayer(layer)

    def enable_download(self, enable=True):
        if enable:
            self.dockwidget.myPushButton11.setText(self.tr("Download"))
            self.dockwidget.myPushButton31.setText(self.tr("Download"))
            self.dockwidget.myPushButton14.setEnabled(True)
            self.dockwidget.myPushButton32.setEnabled(True)
        else:
            self.dockwidget.myPushButton11.setText(self.tr("Cancel"))
            self.dockwidget.myPushButton31.setText(self.tr("Cancel"))
            self.dockwidget.myPushButton14.setEnabled(False)
            self.dockwidget.myPushButton32.setEnabled(False)

    def _LW11_clicked(self, index):
        self.tab1CheckPrefsOrRegions()

    def _LW11_currentItemChanged(self, current, previous):
        self.tab1CheckPrefsOrRegions()

    # When ListWdiget11 (LNI map) is clicked or changed, set ListWidget12.
    # The default is all prefectures (self.myListWidget12_is_all_prefs = True).
    # Otherwise, read the CSV and add items in ListWidget12.
    def tab1CheckPrefsOrRegions(self):
        if len(self.dockwidget.myListWidget11.selectedItems()) == 0:
            return
        if self._LW11_Prev != "" and self._LW11_Prev == str(
            self.dockwidget.myListWidget11.selectedItems()[0].text()
        ):
            return

        self._LW11_Prev = str(self.dockwidget.myListWidget11.selectedItems()[0].text())

        for item in self._LandNumInfo:
            if self._LW11_Prev == item["name_j"]:
                break
        if (
            item["type_muni"].lower() == "regional"
            or item["type_muni"].lower() == "detail"
        ):
            self.myListWidget12_is_all_prefs = False
            self.myListWidget12_is_mesh1 = False
            self._tab1_clear()
            self.dockwidget.myListWidget12.setSelectionMode(
                QAbstractItemView.SingleSelection
            )
            names_pref = jpDataLNI.getPrefsOrRegionsByMapCode(item["code_map"])
            for name_pref in names_pref:
                self.dockwidget.myListWidget12.addItem(name_pref)
        elif item["type_muni"].lower() == "mesh1":
            if not self.myListWidget12_is_mesh1 or item["code_map"] == "L03-b-c":
                self.myListWidget12_is_all_prefs = False
                self.myListWidget12_is_mesh1 = True
                self._tab1_clear()
                self.dockwidget.myListWidget12.setSelectionMode(
                    QAbstractItemView.SingleSelection
                )
                if item["code_map"] != "L03-b-c":
                    for code_pref in range(1, 48):
                        self.dockwidget.myListWidget12.addItem(
                            jpDataUtils.getPrefNameByCode(code_pref)
                        )
                else:
                    for code_pref in [
                        11,
                        12,
                        13,
                        14,
                        21,
                        23,
                        24,
                        26,
                        27,
                        28,
                    ]:
                        self.dockwidget.myListWidget12.addItem(
                            jpDataUtils.getPrefNameByCode(code_pref)
                        )
        elif item["type_muni"].lower() == "single":
            self.myListWidget12_is_all_prefs = False
            self.myListWidget12_is_mesh1 = False
            self._tab1_clear()
            self.dockwidget.myListWidget12.addItem(self.tr("Nation-wide"))
        else:
            if not self.myListWidget12_is_all_prefs:
                self.myListWidget12_is_all_prefs = True
                self.myListWidget12_is_mesh1 = False
                self._tab1_clear()
                self.dockwidget.myListWidget12.setSelectionMode(
                    QAbstractItemView.ExtendedSelection
                )
                for code_pref in range(1, 48):
                    self.dockwidget.myListWidget12.addItem(
                        jpDataUtils.getPrefNameByCode(code_pref)
                    )
        self.tab1CheckYear()

    def _tab1_clear(self):
        self.dockwidget.myListWidget12.clear()
        self.dockwidget.myListWidget13.clear()
        self.dockwidget.myListWidget13.hide()

    def tab1CheckYear(self):
        for item in self._LandNumInfo:
            if self._LW11_Prev == item["name_j"]:
                break

        self.dockwidget.myComboBox11.clear()
        if item["year"].lower() != "csv":
            self.dockwidget.myComboBox11.addItem(item["year"])
        else:
            if len(self.dockwidget.myListWidget12.selectedItems()) > 0:
                name_pref = self.dockwidget.myListWidget12.selectedItems()[0].text()
            else:
                name_pref = None
            years = jpDataLNI.getYearsByMapCode(item["code_map"], name_pref)
            for year in years:
                self.dockwidget.myComboBox11.addItem(year)

    def tab1SetLW13(self):
        # map_code and year
        if len(self.dockwidget.myListWidget11.selectedItems()) == 0:
            return
        if len(self.dockwidget.myListWidget12.selectedItems()) == 0:
            return
        if self.dockwidget.myComboBox11.currentText().strip() == "":
            return

        map_code = ""
        str_name_j = str(self.dockwidget.myListWidget11.selectedItems()[0].text())
        str_name_pref = str(self.dockwidget.myListWidget12.selectedItems()[0].text())
        str_year = self.dockwidget.myComboBox11.currentText()

        for item in self._LandNumInfo:
            if str_name_j == item["name_j"]:
                if (
                    item["type_muni"].lower() != "detail"
                    and item["type_muni"].lower() != "mesh1"
                ):
                    return
                map_code = item["code_map"]
                break

        self.dockwidget.myListWidget13.clear()
        self.dockwidget.myListWidget13.show()

        if item["type_muni"].lower() == "detail":
            details = jpDataLNI.getDetailsByMapCodePrefNameYear(
                map_code, str_name_pref, str_year
            )
        else:
            details = jpDataMesh.getMesh1ByPrefName(str_name_pref)

        for detail in details:
            self.dockwidget.myListWidget13.addItem(detail)

    def tab1DownloadAll2(self):
        if self.dockwidget.myPushButton11.text() == self.tr("Cancel"):
            self.cancel_download()
            return

        year = str(self.dockwidget.myComboBox11.currentText())
        for thisLandNum in self._LandNumInfo:
            if (
                str(self.dockwidget.myListWidget11.selectedItems()[0].text())
                == thisLandNum["name_j"]
            ):
                break
        pref_name = self.dockwidget.myListWidget12.selectedItems()
        self._dl_url_zip = []
        self._dl_iter = 0
        for _ in range(len(pref_name)):

            if (
                thisLandNum["type_muni"] == "regional"
                or thisLandNum["type_muni"] == "detail"
            ):
                row = jpDataLNI.getUrlCodeZipByPrefName(
                    thisLandNum["code_map"],
                    thisLandNum["name_pref"],
                    year,
                )
                tempUrl = row["url"]
                tempZipFileName = row["zip"]

            elif thisLandNum["type_muni"] == "mesh1":
                str_code_mesh1 = str(
                    self.dockwidget.myListWidget13.selectedItems()[0].text()
                )
                tempUrl = thisLandNum["url"].replace("code_mesh1", str_code_mesh1)
                tempZipFileName = thisLandNum["zip"].replace(
                    "code_mesh1", str_code_mesh1
                )
            else:
                tempUrl = thisLandNum["url"]
                tempZipFileName = thisLandNum["zip"]

            tempSubFolder = thisLandNum["code_map"]

            self._dl_url_zip.append(
                {
                    "url": tempUrl,
                    "zip": tempZipFileName,
                    "subfolder": tempSubFolder,
                }
            )
        self._download_iter_2()

    def tab1Web(self):
        items = self.dockwidget.myListWidget11.selectedItems()
        for i in range(len(items)):
            for item in self._LandNumInfo:
                if str(items[i].text()) == item["name_j"]:
                    url = QUrl(item["source"])
                    QDesktopServices.openUrl(url)
                    break

    def tab1AddMap(self):
        # Variables used in the function:
        # item:
        # pref_name: The name of selected prefectures or regions  in LW12
        # pref_code: The corresponding codes
        # year
        # detail: The names of selected in LW13
        for thisLandNum in self._LandNumInfo:
            if (
                str(self.dockwidget.myListWidget11.selectedItems()[0].text())
                == thisLandNum["name_j"]
            ):
                break
        pref_name = self.dockwidget.myListWidget12.selectedItems()
        pref_code = []
        year = self.dockwidget.myComboBox11.currentText()
        for i in range(len(pref_name)):
            pref_code.append(
                jpDataUtils.getPrefCodeByName(
                    str(self.dockwidget.myListWidget12.selectedItems()[i].text())
                )
            )
        if len(self.dockwidget.myListWidget13.selectedItems()) > 0:
            detail = str(self.dockwidget.myListWidget13.selectedItems()[0].text())
        else:
            detail = None
        if thisLandNum["type_muni"] == "single":
            pref_code = [""]

        for x in range(len(pref_code)):
            tempQmlFile = thisLandNum["qml"]
            tempLayerName = thisLandNum["name_j"] + " (" + year + ")"
            if (
                thisLandNum["type_muni"].lower() == "regional"
                or thisLandNum["type_muni"].lower() == "detail"
            ):
                y = jpDataLNI.getUrlCodeZipByPrefName(
                    thisLandNum["code_map"], str(pref_name[x].text()), year, detail
                )
                tempShpFullPath = jpDataUtils.unzipAndGetShp(
                    posixpath.join(self._folderPath, thisLandNum["code_map"]),
                    y["zip"],
                    y["shp"],
                    y["altdir"],
                    pref_code[x],
                    epsg=item["epsg"],
                )
                if y["qml"] != "":
                    tempQmlFile = y["qml"]
                tempLayerName = (
                    thisLandNum["name_j"] + " (" + str(pref_name[x].text()) + "," + year + ")"
                )
                if thisLandNum["type_muni"].lower() == "detail":
                    tempLayerName = thisLandNum["name_j"] + " (" + detail + "," + year + ")"
            elif thisLandNum["type_muni"].lower() == "mesh1":
                str_code_mesh1 = str(
                    self.dockwidget.myListWidget13.selectedItems()[0].text()
                )
                tempShpFullPath = jpDataUtils.unzipAndGetShp(
                    posixpath.join(self._folderPath, thisLandNum["code_map"]),
                    thisLandNum["zip"].replace("code_mesh1", str_code_mesh1),
                    thisLandNum["shp"].replace("code_mesh1", str_code_mesh1),
                    thisLandNum["altdir"],
                    pref_code[x],
                    epsg=thisLandNum["epsg"],
                )
                tempLayerName = thisLandNum["name_j"] + " (" + str_code_mesh1 + "," + year + ")"
            else:
                tempShpFullPath = jpDataUtils.unzipAndGetShp(
                    posixpath.join(self._folderPath, thisLandNum["code_map"]),
                    thisLandNum["zip"],
                    thisLandNum["shp"],
                    thisLandNum["altdir"],
                    pref_code[x],
                    epsg=thisLandNum["epsg"],
                )

            if tempShpFullPath is None:
                self.setLabel(
                    self.tr("Cannot find the .shp file: ")
                    + thisLandNum["shp"].replace("code_pref", pref_code[x])
                )
                self.iface.messageBar().pushMessage(
                    "Error",
                    "Cannot find the .shp file: "
                    + item["shp"].replace("code_pref", pref_code[x]),
                    1,
                    duration=10,
                )
                break

            if tempShpFullPath != "":
                if (
                    thisLandNum["encoding"].lower() == "utf-8"
                    or thisLandNum["encoding"].lower() == "utf8"
                ):
                    encoding = "UTF-8"
                else:
                    encoding = "CP932"
                self._add_map(tempShpFullPath, tempLayerName, tempQmlFile, encoding)

    def start_download(self, url, subFolder, zipFileName):
        if not os.path.exists(posixpath.join(self._folderPath, subFolder)):
            os.mkdir(posixpath.join(self._folderPath, subFolder))

        if not os.path.exists(posixpath.join(self._folderPath, subFolder, zipFileName)):
            self.setProxyServer()
            self.setLabel(self.tr("Downloading: ") + zipFileName)
            self._downloader.setUrl(url)
            self._downloader.setFilePath(
                posixpath.join(self._folderPath, subFolder, zipFileName)
            )
            self.enable_download(False)
            self._downloader.start()
        else:
            self.dockwidget.setLabel(self.tr("The zip file exists: ") + zipFileName)
            self.enable_download()

    def download_finished(self, success):
        current_text = self.dockwidget.myLabelStatus.text()
        self.setLabel(current_text + self.tr("...Done"))
        self.enable_download()
        self.dockwidget.progressBar.setValue(100)

        if len(self._dl_url_zip) > 0 and self._dl_iter < len(self._dl_url_zip):
            self._download_iter_2()
        else:
            self._dl_iter = 0
            self._dl_url_zip = []

    def cancel_download(self):
        self._dl_url_zip = []
        if self._downloader is not None:
            current_text = self.dockwidget.myLabelStatus.text()
            self.setLabel(current_text + self.tr("...Cancelled"))
            self._downloader.stop()
        else:
            self._downloader = jpDataDownloader.DownloadThread()
        self.enable_download()

    def _LW31_clicked(self, index):
        self.tab3SelectPref()

    def _LW31_currentItemChanged(self, current, previous):
        if current is None or current != previous:
            self.tab3SelectPref()

    def tab3SelectPref(self):
        if len(self.dockwidget.myListWidget31.selectedItems()) == 0:
            return

        if self._LW31_Prev == str(
            self.dockwidget.myListWidget31.selectedItems()[0].text()
        ):
            return

        self._LW31_Prev = str(self.dockwidget.myListWidget31.selectedItems()[0].text())
        rows = jpDataMuni.getMuniFromPrefName(self._LW31_Prev)
        self.dockwidget.myListWidget32.clear()
        for row in rows:
            if row["name_muni"] != "":
                item = QListWidgetItem(row["name_muni"])
                if row["name_muni"] in [
                    "札幌市",
                    "仙台市",
                    "千葉市",
                    "さいたま市",
                    "横浜市",
                    "川崎市",
                    "相模原市",
                    "新潟市",
                    "静岡市",
                    "浜松市",
                    "名古屋市",
                    "京都市",
                    "大阪市",
                    "堺市",
                    "神戸市",
                    "岡山市",
                    "広島市",
                    "福岡市",
                    "北九州市",
                    "熊本市",
                ]:
                    item.setFlags(item.flags() & ~Qt.ItemIsSelectable)
                    item.setForeground(Qt.gray)
                self.dockwidget.myListWidget32.addItem(item)
        self._tab3_set_mesh()

    def _tab3_set_mesh(self):
        if self.dockwidget.myComboBox32.currentIndex() == 0:
            self.dockwidget.myListWidget33.clear()
            self.dockwidget.myListWidget33.hide()
            return

        if len(self.dockwidget.myListWidget31.selectedItems()) == 0:
            return

        self.dockwidget.myListWidget33.clear()
        self.dockwidget.myListWidget33.show()

        details = jpDataMesh.getMesh1ByPrefName(self._LW31_Prev)

        for detail in details:
            self.dockwidget.myListWidget33.addItem(detail)

    def tab3DownloadAll2(self):
        if self.dockwidget.myPushButton31.text() == self.tr("Cancel"):
            self.cancel_download()
            return

        self._dl_url_zip = []
        self._dl_iter = 0
        year = str(self.dockwidget.myComboBox31.currentText())
        code_pref = jpDataUtils.getPrefCodeByName(self._LW31_Prev)
        if self.dockwidget.myComboBox32.currentIndex() == 0:
            muni_names = self.dockwidget.myListWidget32.selectedItems()
        else:
            muni_names = self.dockwidget.myListWidget33.selectedItems()
        for muni_name in muni_names:
            # Usually, attributes are in one file, so for loop is not
            # really necessary
            row = jpDataMuni.getRowFromNames(self._LW31_Prev, str(muni_name.text()))
            if self.dockwidget.myComboBox32.currentIndex() == 0:
                code_muni = row["code_muni"]
            else:
                code_muni = str(muni_name.text())

            # Append the attribute data first
            tempUrl, tempZip, tempSubFolder = jpDataCensus.getAttr(
                year,
                code_pref,
                code_muni,
                self.dockwidget.myComboBox32.currentIndex(),
            )
            self._dl_url_zip.append(
                {
                    "year": year,
                    "url": tempUrl,
                    "zip": tempZip,
                    "subfolder": tempSubFolder,
                }
            )
            # Append the shp data
            tempUrl, tempZip, tempSubFolder = jpDataCensus.getZip(
                year,
                code_pref,
                code_muni,
                self.dockwidget.myComboBox32.currentIndex(),
            )
            self._dl_url_zip.append(
                {
                    "year": year,
                    "url": tempUrl,
                    "zip": tempZip,
                    "subfolder": tempSubFolder,
                }
            )

        self._download_iter_2()

    def tab3AddMap(self):
        year = str(self.dockwidget.myComboBox31.currentText())
        code_pref = jpDataUtils.getPrefCodeByName(self._LW31_Prev)

        if self.dockwidget.myComboBox32.currentIndex() == 0:
            muni_names = self.dockwidget.myListWidget32.selectedItems()
            tempSubFolder = "Census"
            tempQmlFile = "Census-" + year + ".qml"
            name_muni_suffix = ""
        else:
            muni_names = self.dockwidget.myListWidget33.selectedItems()
            if self.dockwidget.myComboBox32.currentIndex() == 1:
                tempSubFolder = "Census/SDDSWS"
                tempQmlFile = "Census-SDDSWS-" + year + ".qml"
                name_muni_suffix = " 3次"
            elif self.dockwidget.myComboBox32.currentIndex() == 2:
                tempSubFolder = "Census/HDDSWH"
                tempQmlFile = "Census-HDDSWH-" + year + ".qml"
                name_muni_suffix = " 4次"
            elif self.dockwidget.myComboBox32.currentIndex() == 3:
                tempSubFolder = "Census/QDDSWQ"
                tempQmlFile = "Census-QDDSWQ-" + year + ".qml"
                name_muni_suffix = " 5次"

        for muni_name in muni_names:
            name_muni = str(muni_name.text())
            if self.dockwidget.myComboBox32.currentIndex() == 0:
                row = jpDataMuni.getRowFromNames(self._LW31_Prev, name_muni)
                code_muni = row["code_muni"]
            else:
                code_muni = name_muni
            tempZipFileName, tempShpFileName = jpDataCensus.getZipShp(
                year,
                code_pref,
                code_muni,
                self.dockwidget.myComboBox32.currentIndex(),
            )

            tempShpFullPath = jpDataUtils.unzipAndGetShp(
                posixpath.join(self._folderPath, tempSubFolder),
                tempZipFileName,
                tempShpFileName,
            )

            if tempShpFullPath is None:
                self.setLabel(self.tr("Cannot find the .shp file: ") + name_muni)
                self.iface.messageBar().pushMessage(
                    "Error",
                    "Cannot find the .shp file: " + name_muni,
                    1,
                    duration=10,
                )
                break

            if tempShpFullPath != "":
                tempCsvFileName = jpDataCensus.getAttrCsvFileName(
                    year,
                    code_pref,
                    code_muni,
                    self.dockwidget.myComboBox32.currentIndex(),
                )
                tempUrl, tempZip, tempSubFolder = jpDataCensus.getAttr(
                    year,
                    code_pref,
                    code_muni,
                    self.dockwidget.myComboBox32.currentIndex(),
                )
                jpDataCensus.unzipAttr(
                    posixpath.join(self._folderPath, tempSubFolder), tempZip
                )
                encoding = jpDataCensus.performJoin(
                    posixpath.join(self._folderPath, tempSubFolder),
                    year,
                    tempShpFileName,
                    tempCsvFileName,
                )
                tempShpFullPath = tempShpFullPath.replace(".shp", "-" + year + ".shp")
                self._add_map(
                    tempShpFullPath,
                    name_muni + name_muni_suffix + " (" + year + ")",
                    tempQmlFile,
                    encoding=encoding,
                )

    def _add_map(self, shpFileFullPath, layerName, qmlFileName, encoding="CP932"):
        tempLayer = QgsVectorLayer(shpFileFullPath, layerName, "ogr")
        tempLayer.setProviderEncoding(encoding)
        if not os.path.exists(shpFileFullPath[:-4] + ".qix"):
            tempLayer.dataProvider().createSpatialIndex()

        if os.path.isfile(posixpath.join(self.plugin_dir, "qml", qmlFileName)):
            # For the qml files that use SVG images in the plugin folder
            with tempfile.TemporaryDirectory() as temp_dir:
                with open(
                    posixpath.join(self.plugin_dir, "qml", qmlFileName),
                    "r",
                ) as file:
                    file_contents = file.read()
                new_contents = file_contents.replace("PLUGIN_DIR", self.plugin_dir)
                with open(posixpath.join(temp_dir, qmlFileName), "w") as file:
                    file.write(new_contents)
                if tempLayer.loadNamedStyle(posixpath.join(temp_dir, qmlFileName)):
                    tempLayer.triggerRepaint()
        QgsProject.instance().addMapLayer(tempLayer)
        return tempLayer

    def chooseFolder(self):
        # Open a folder dialog to choose a folder
        self._folderPath = QFileDialog.getExistingDirectory(
            self.iface.mainWindow(), self.tr("Choose Folder")
        )
        if not os.access(self._folderPath, os.W_OK):
            self.setLabel(self.tr("The folder is not writable."))

        if self._folderPath:
            self.enable_download()
            self.dockwidget.myLabel1.setText(self._folderPath)
            QgsSettings().setValue("jpdata/FolderPath", self._folderPath)

    def setProxyServer(self):
        _proxyServer = self.dockwidget.myLineEditSetting1.text()
        if len(_proxyServer) > 10:
            if self._proxyServer != _proxyServer:
                self._proxyServer = _proxyServer
                QgsSettings().setValue("jpdata/ProxyServer", self._proxyServer)
                self._downloader.setProxyServer(self._proxyServer)
            self._downloader.setProxyUser(self.dockwidget.myLineEditSetting2.text())
            self._downloader.setProxyPassword(self.dockwidget.myLineEditSetting3.text())
        else:
            QgsSettings().setValue("jpdata/ProxyServer", "http://")

    # year = 2023 and so on
    # type must be one of ["regional","detail","single","","census"]
    # selection_code is a dictionary of codes
    #     (prefectural codes, municipal codes and so on)
    # a list of "code_pref"s (type = "" or "region")
    # or a list of "code_muni"s (type = "census")
    def _download_iter_2(self):
        _start_download = False

        for x in range(self._dl_iter, len(self._dl_url_zip)):
            self.setLabel("Fetching " + str(x) + " in " + str(len(self._dl_url_zip)))
            tempUrl = self._dl_url_zip[x]["url"]
            tempZipFileName = self._dl_url_zip[x]["zip"]
            tempSubFolder = self._dl_url_zip[x]["subfolder"]
            if not os.path.exists(
                posixpath.join(
                    self._folderPath,
                    tempSubFolder,
                    tempZipFileName,
                )
            ):
                _start_download = True
                break
            else:
                self.setLabel(self.tr("The zip file exists: ") + tempZipFileName)
        if _start_download:
            self.dockwidget.progressBar.setValue(0)
            self.enable_download(False)
            self._dl_iter = x + 1
            self.start_download(tempUrl, tempSubFolder, tempZipFileName)
        else:
            self.enable_download()
            self._dl_iter = 0

    def setLabel(self, message):
        self.dockwidget.myLabelStatus.setText(message)
        if self._verbose:
            jpDataUtils.printLog(message)
