# -*- coding: utf-8 -*-
"""
/***************************************************************************
 jpdata
                                 A QGIS plugin
 Download and load various data of Japan
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-04-28
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Yoshihiko Baba
        email                : babayoshihiko@mac.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import Qt, QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QListWidgetItem
#from qgis.PyQt.QtWidgets import QApplication, QMainWindow, QLabel, QPushButton
#from qgis.PyQt.QtWidgets import QProgressBar
from qgis.PyQt.QtWidgets import QAbstractItemView
from qgis.core import QgsProject, QgsSettings, QgsVectorLayer, QgsRasterLayer

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .jpdata_dialog import jpdataDialog
import os.path

from urllib.request import urlopen
import os
import zipfile
import time
from . import jpDataUtils
from . import jpDataDownloader
from . import jpDataMuni
from . import jpDataCensus



class jpdata:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'jpdata_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        s = QgsSettings()
        self._folderPath = s.value("jpdata/FolderPath", "~")
        
        self._downloader = jpDataDownloader.Downloader()

        self.actions = []
        self.menu = self.tr('&jpdata')
        
        self._LandNumInfo = jpDataUtils.getMapsFromCsv()
        self._GSI = jpDataUtils.getTilesFromCsv()
        
        # Create an action that triggers the folder chooser
        self.action = QAction('Choose Folder', self.iface.mainWindow())
        self.action.triggered.connect(self.chooseFolder)

        # Add the action to the toolbar
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu("&Folder Chooser Plugin", self.action)

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None



    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('jpdata', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)
        self.iface.addLayerMenu().addAction(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        self.add_action(
            self.plugin_dir + '/icon.png',
            text = self.tr('Add Japan Data'),
            callback = self.run,
            parent = self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.addLayerMenu().removeAction(action)
            self.iface.removePluginMenu(
                self.tr('&jpdata'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = jpdataDialog()
            self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)
            
            if self._folderPath:
                self.dlg.myLabel1.setText(self._folderPath)
            else:
                self.dlg.myLabel1.setText(self.tr('Choose folder for zip/shp files'))
            
            # Tab 1
            self.dlg.myTabWidget.setTabText(0, self.tr('LandNumInfo'))
            self.dlg.myPushButton1.setText(self.tr('Download'))
            self.dlg.myPushButton1.setToolTip(self.tr('Download Land Numerical Information data'))
            self.dlg.myPushButton1.clicked.connect(self.downloadAll)
            self.dlg.myPushButton2.setText(self.tr('Choose Folder'))
            self.dlg.myPushButton2.setToolTip(self.tr('Choose Folder'))
            self.dlg.myPushButton2.clicked.connect(self.chooseFolder)
            self.dlg.myPushButton4.setText(self.tr('Add to Map'))
            self.dlg.myPushButton4.setToolTip(self.tr('Add Shapefile as a Layer to Map on QGIS'))
            self.dlg.myPushButton4.clicked.connect(self.tab1AddMap)
            for row in self._LandNumInfo:
                item =  QListWidgetItem(row['name_j'])
                if (row['availability'] != 'yes'):
                    item.setFlags(item.flags() & ~Qt.ItemIsSelectable)
                    item.setForeground(Qt.gray)
                self.dlg.myListWidget.addItem(item)
            for code in range(1,47):
                self.dlg.myListWidget2.addItem(jpDataUtils.getPrefNameByCode(code))
            # Users can choose multiple items
            self.dlg.myListWidget.setSelectionMode(
                QAbstractItemView.ExtendedSelection
            )
            self.dlg.myListWidget2.setSelectionMode(
                QAbstractItemView.ExtendedSelection
            )
            
            # Tab 2
            self.dlg.myTabWidget.setTabText(1, self.tr('GSI Tiles'))
            self.dlg.myPushButton5.setText(self.tr('Add to Map'))
            self.dlg.myPushButton5.setToolTip(self.tr('Add GSI xyz tile server to Map on QGIS'))
            self.dlg.myPushButton5.clicked.connect(self.addTile)
            for row in self._GSI:
                self.dlg.myListWidget3.addItem(row['name_j'])
            
            # Set Tab 3
            self.dlg.myTabWidget.setTabText(2, self.tr('Census'))
            self.dlg.myLabel31.setText(self.tr('Year'))
            self.dlg.myComboBox31.addItem('2020')
            self.dlg.myComboBox31.addItem('2015')
            self.dlg.myComboBox31.addItem('2010')
            self.dlg.myComboBox31.addItem('2005')
            self.dlg.myComboBox31.addItem('2000')
            self.dlg.myPushButton31.setText(self.tr('Download'))
            self.dlg.myPushButton31.setToolTip(self.tr('Download census data by city'))
            self.dlg.myPushButton31.clicked.connect(self.tab3DownloadAll)
            self.dlg.myPushButton32.setText(self.tr('Add to Map'))
            self.dlg.myPushButton32.setToolTip(self.tr('Add Shapefile as a Layer to Map on QGIS'))
            self.dlg.myPushButton32.clicked.connect(self.tab3AddMap)
            self.dlg.myListWidget31.itemClicked.connect(self.tab3SelectPref)
            self.dlg.myListWidget32.setSelectionMode(
                QAbstractItemView.ExtendedSelection
            )
            
            for code in range(1,47):
                self.dlg.myListWidget31.addItem(jpDataUtils.getPrefNameByCode(code))

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def downloadAll(self):
        items = self.dlg.myListWidget.selectedItems()
        pref_name = self.dlg.myListWidget2.selectedItems()
        pref_code = []
        for i in range(len(pref_name)):
            pref_code.append(
                jpDataUtils.getPrefCodeByName(
                    str(self.dlg.myListWidget2.selectedItems()[i].text())
                )
            )
        
        for i in range(len(items)):
            for item in self._LandNumInfo:
                if str(self.dlg.myListWidget.selectedItems()[i].text()) == item['name_j']:
                    for x in range(len(pref_code)):
                        tempUrl = item['url'].replace('code_pref', pref_code[x])
                        tempZipFileName = item['zip'].replace('code_pref', pref_code[x])
                        self.startDownload(tempUrl, item['code_map'], tempZipFileName)
                    break

    def addTile(self):
        selected_items = self.dlg.myListWidget3.selectedItems()
        
        for current_gsi in self._GSI:
            if current_gsi['name_j'] == str(selected_items[0].text()):
                tile_name = current_gsi['name_j']
                tile_url = current_gsi['url']
                zoom_min = current_gsi['zoom_min']
                zoom_max = current_gsi['zoom_max']
                break
        
        tile_url = 'type=xyz&url=' + tile_url + '&zmax=' + zoom_max + '&zmin=' + zoom_min + '&crs=EPSG3857'
        layer = QgsRasterLayer(
            tile_url,
            tile_name, 'wms')
        if not layer.isValid():
            return
        QgsProject.instance().addMapLayer(layer)

    def tab1AddMap(self):
        items = self.dlg.myListWidget.selectedItems()
        pref_name = self.dlg.myListWidget2.selectedItems()
        pref_code = []
        for i in range(len(pref_name)):
            pref_code.append(
                jpDataUtils.getPrefCodeByName(
                    str(self.dlg.myListWidget2.selectedItems()[i].text())
                )
            )
        
        for i in range(len(items)):
            for item in self._LandNumInfo:
                if str(self.dlg.myListWidget.selectedItems()[i].text()) == item['name_j']:
                    if item['type_muni'] == 'single':
                        # The single .shp file covers the whole nation
                        # So, pick the first prefecture only (not used, though)
                        seleted_prefs = [0]
                    else:
                        seleted_prefs = range(len(pref_code))
                    for x in seleted_prefs:
                        tempShpFileName = jpDataUtils.unzipAndGetShp(
                            self._folderPath + '/' + item['code_map'], 
                            item['zip'], 
                            item['shp'], 
                            item['altdir'], 
                            pref_code[x],
                            epsg = item['epsg']
                        )

                        if tempShpFileName is None:
                            self.iface.messageBar().pushMessage(
                                'Error', 
                                'Cannot find the .shp file: ' + item['shp'].replace('code_pref', pref_code[x]), 1, duration = 10
                            )
                            tempShpFileName, ok = QFileDialog.getOpenFileName(
                                self.iface.mainWindow(),
                                'Select a File', 
                                self._folderPath + '/' + item['code_map'], 
                                'ESRI Shapefile (*.shp)'
                            )
                        
                        if tempShpFileName != '':
                            if item['type_muni'] == 'single':
                                tempLayer = QgsVectorLayer(
                                    tempShpFileName, 
                                    item['name_j'], 
                                    'ogr'
                                )
                            else:
                                tempLayer = QgsVectorLayer(
                                    tempShpFileName, 
                                    item['name_j'] + ' (' + str(pref_name[x].text()) + ')', 
                                    'ogr'
                                )
                            
                            tempLayer.setProviderEncoding(item['encoding'])
                            if not os.path.exists(tempShpFileName[:-4] + ".qix"):
                                tempLayer.dataProvider().createSpatialIndex()

                            if os.path.exists(self.plugin_dir + '/qml/' + item['qml']):
                                if tempLayer.loadNamedStyle(self.plugin_dir + '/qml/' + item['qml']):
                                    tempLayer.triggerRepaint()
                            QgsProject.instance().addMapLayer(tempLayer)
                    break

    def startDownload(self, url, subFolder, zipFileName):
        if not os.path.exists(self._folderPath + '/' + subFolder):
            os.mkdir(self._folderPath + '/' + subFolder) 
        
        if not os.path.exists(self._folderPath + '/' + subFolder + '/' + zipFileName):
            self._downloader.Download(
                url,
                self._folderPath + '/' + subFolder + '/' + zipFileName,
                self.dlg.progressBar
            )

    def tab3SelectPref(self):
        selectedItems = self.dlg.myListWidget31.selectedItems()
        for item in selectedItems:
            rows = jpDataMuni.getMuniFromPrefName( str(item.text()) )
            self.dlg.myListWidget32.clear()
            for row in rows:
                self.dlg.myListWidget32.addItem( row['name_muni'] )

    def tab3DownloadAll(self):
        year = str(self.dlg.myComboBox31.currentText())
        pref_name = str(self.dlg.myListWidget31.selectedItems()[0].text())
        muni_names = self.dlg.myListWidget32.selectedItems()

        for muni_name in muni_names:
            row = jpDataMuni.getRowFromNames(pref_name, str(muni_name.text()))
            tempUrl = jpDataCensus.getUrl( year, row['code_pref'], row['code_muni'] )
            tempZipFileName = jpDataCensus.getZipFileName( year, row['code_pref'], row['code_muni'] )
            self.startDownload(tempUrl ,'Census', tempZipFileName)

    def tab3AddMap(self):
        year = str(self.dlg.myComboBox31.currentText())        
        pref_name = str(self.dlg.myListWidget31.selectedItems()[0].text())
        muni_names = self.dlg.myListWidget32.selectedItems()

        for muni_name in muni_names:
            row = jpDataMuni.getRowFromNames(pref_name, str(muni_name.text()))
            tempZipFileName = jpDataCensus.getZipFileName( year, row['code_pref'], row['code_muni'] )
            tempShpFileName = jpDataCensus.getShpFileName( year, row['code_pref'], row['code_muni'] )
            tempShpFileName = jpDataUtils.unzipAndGetShp(
                self._folderPath + '/Census/',
                tempZipFileName,
                tempShpFileName
            )

            if tempShpFileName is None:
                tempShpFileName, ok = QFileDialog.getOpenFileName(
                                self.iface.mainWindow(),
                                self.tr('Select a shp file'), 
                                self._folderPath + '/Census', 
                                'ESRI Shapefile (*.shp)'
                )
            
            if tempShpFileName != '':
                tempLayer = QgsVectorLayer(
                    tempShpFileName, 
                    row['name_muni'] + ' (' + year + ')', 
                    'ogr'
                )
                tempLayer.setProviderEncoding('CP932')
                if not os.path.exists(tempShpFileName[:-4] + ".qix"):
                    tempLayer.dataProvider().createSpatialIndex()

                if os.path.exists(self.plugin_dir + '/qml/Census.qml'):
                    if tempLayer.loadNamedStyle(self.plugin_dir + '/qml/Census.qml'):
                        tempLayer.triggerRepaint()
                QgsProject.instance().addMapLayer(tempLayer)


    def chooseFolder(self):
        # Open a folder dialog to choose a folder
        self._folderPath = QFileDialog.getExistingDirectory(
            self.iface.mainWindow(), 
            self.tr('Choose Folder')
        )

        if self._folderPath:
            self.dlg.myLabel1.setText(self._folderPath)
            s = QgsSettings()
            s.setValue("jpdata/FolderPath", self._folderPath)
