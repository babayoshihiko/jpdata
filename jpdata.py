# -*- coding: utf-8 -*-
"""
/***************************************************************************
 jpdata
                                 A QGIS plugin
 Download and load various data of Japan
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-04-28
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Yoshihiko Baba
        email                : babayoshihiko@mac.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QThread, pyqtSignal
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.PyQt.QtWidgets import QApplication, QMainWindow, QLabel, QPushButton
from qgis.PyQt.QtWidgets import QProgressBar
from qgis.PyQt.QtWidgets import QAbstractItemView
from qgis.core import QgsProject, QgsSettings, QgsVectorLayer, QgsRasterLayer
from qgis.gui import QgsMessageBar




# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .jpdata_dialog import jpdataDialog
import os.path

from urllib.request import urlopen
import os
import zipfile
import time
from . import jpDataUtils


class Downloader(QThread):

    # Signal for the window to establish the maximum value
    # of the progress bar.
    setTotalProgress = pyqtSignal(int)
    # Signal to increase the progress.
    setCurrentProgress = pyqtSignal(int)
    # Signal to be emitted when the file has been downloaded successfully.
    succeeded = pyqtSignal()

    def __init__(self, url, filename):
        super().__init__()
        self._url = url
        self._filename = filename

    def run(self):
        url = self._url
        filename = self._filename
        readBytes = 0
        chunkSize = 1024
        # Open the URL address.
        with urlopen(url) as r:
            # Tell the window the amount of bytes to be downloaded.
            self.setTotalProgress.emit(int(r.info()["Content-Length"]))
            with open(filename, "ab") as f:
                while True:
                    # Read a piece of the file we are downloading.
                    chunk = r.read(chunkSize)
                    # If the result is `None`, that means data is not
                    # downloaded yet. Just keep waiting.
                    if chunk is None:
                        continue
                    # If the result is an empty `bytes` instance, then
                    # the file is complete.
                    elif chunk == b"":
                        break
                    # Write into the local file the downloaded chunk.
                    f.write(chunk)
                    readBytes += chunkSize
                    # Tell the window how many bytes we have received.
                    self.setCurrentProgress.emit(readBytes)
        # If this line is reached then no exception has ocurred in
        # the previous lines.
        self.succeeded.emit()



class jpdata:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'jpdata_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        s = QgsSettings()
        self._folderPath = s.value("jpdata/FolderPath", "~")

        self.actions = []
        self.menu = self.tr(u'&jpdata')
        
        self._LandNumInfo = jpDataUtils.getMapsFromCsv()
        self._GSI = jpDataUtils.getTilesFromCsv()
        
        # Create an action that triggers the folder chooser
        self.action = QAction(u'Choose Folder', self.iface.mainWindow())
        self.action.triggered.connect(self.chooseFolder)

        # Add the action to the toolbar
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu("&Folder Chooser Plugin", self.action)

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None



    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('jpdata', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)
        self.iface.addLayerMenu().addAction(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        self.add_action(
            self.plugin_dir + '/icon.png',
            text = self.tr(u'Add Japan Data'),
            callback = self.run,
            parent = self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.addLayerMenu().removeAction(action)
            self.iface.removePluginMenu(
                self.tr(u'&jpdata'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = jpdataDialog()

            if self._folderPath:
                self.dlg.myLabel1.setText(self._folderPath)
            else:
                self.dlg.myLabel1.setText(self.tr(u'Choose folder for zip/shp files'))
            
            self.dlg.myTabWidget.setTabText(0, self.tr(u'LandNumInfo'))
            self.dlg.myTabWidget.setTabText(1, self.tr(u'GSI Tiles'))
            
            self.dlg.myPushButton1.setText(self.tr(u'Download'))
            self.dlg.myPushButton1.setToolTip(self.tr(u'Download'))
            self.dlg.myPushButton1.clicked.connect(self.downloadAll)
            self.dlg.myPushButton2.setText(self.tr(u'Choose Folder'))
            self.dlg.myPushButton2.setToolTip(self.tr(u'Choose Folder'))
            self.dlg.myPushButton2.clicked.connect(self.chooseFolder)
            self.dlg.myPushButton3.setText(self.tr(u'Unzip'))
            self.dlg.myPushButton3.setToolTip(self.tr(u'Unzip downloaded zipfile'))
            self.dlg.myPushButton3.clicked.connect(self.unzipAll)
            self.dlg.myPushButton4.setText(self.tr(u'Add to Map'))
            self.dlg.myPushButton4.setToolTip(self.tr(u'Add Shapefile as a Layer to Map on QGIS'))
            self.dlg.myPushButton4.clicked.connect(self.addLNIAll)
            self.dlg.myPushButton5.setText(self.tr(u'Add to Map'))
            self.dlg.myPushButton5.setToolTip(self.tr(u'Add GSI xyz tile server to Map on QGIS'))
            self.dlg.myPushButton5.clicked.connect(self.addTile)
            
            for item in self._LandNumInfo:
                self.dlg.myListWidget.addItem(item['name_j'])
            
            for code in range(1,47):
                self.dlg.myListWidget2.addItem(jpDataUtils.getPrefNameByCode(code))
            
            for item in self._GSI:
                self.dlg.myListWidget3.addItem(item['name_j'])
            
            # Users can choose multiple items
            self.dlg.myListWidget.setSelectionMode(
                QAbstractItemView.ExtendedSelection
            )
            self.dlg.myListWidget2.setSelectionMode(
                QAbstractItemView.ExtendedSelection
            )

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def downloadAll(self):
        items = self.dlg.myListWidget.selectedItems()
        pref_name = self.dlg.myListWidget2.selectedItems()
        pref_code = []
        for i in range(len(pref_name)):
            pref_code.append(
                jpDataUtils.getPrefCodeByName(
                    str(self.dlg.myListWidget2.selectedItems()[i].text())
                )
            )
        
        for i in range(len(items)):
            for item in self._LandNumInfo:
                if str(self.dlg.myListWidget.selectedItems()[i].text()) == item['name_j']:
                    for x in range(len(pref_code)):
                        tempUrl = item['url'].replace(u'code_pref', pref_code[x])
                        tempZipFileName = item['zip'].replace(u'code_pref', pref_code[x])
                        self.initDownload(tempUrl, item['code_map'], tempZipFileName)
                    break

    def unzipAll(self):
        items = self.dlg.myListWidget.selectedItems()
        pref_name = self.dlg.myListWidget2.selectedItems()
        pref_code = []
        for i in range(len(pref_name)):
            pref_code.append(
                jpDataUtils.getPrefCodeByName(
                    str(self.dlg.myListWidget2.selectedItems()[i].text())
                )
            )
        
        for i in range(len(items)):
            for item in self._LandNumInfo:
                if str(self.dlg.myListWidget.selectedItems()[i].text()) == item['name_j']:
                    for x in range(len(pref_code)):
                        tempZipFileName = item['zip'].replace(u'code_pref', pref_code[x])
                        if os.path.exists(self._folderPath + '/' +  item['code_map'] + '/' + tempZipFileName):
                            with zipfile.ZipFile(
                                self._folderPath + '/' + item['code_map'] + '/' + tempZipFileName, 'r'
                            ) as zip_ref:
                                zip_ref.extractall(self._folderPath + '/' + item['code_map'])
                    break

    def addTile(self):
        selected_items = self.dlg.myListWidget3.selectedItems()
        
        for current_gsi in self._GSI:
            if current_gsi['name_j'] == str(selected_items[0].text()):
                tile_name = current_gsi['name_j']
                tile_url = current_gsi['url']
                zoom_min = current_gsi['zoom_min']
                zoom_max = current_gsi['zoom_max']
                break
        
        # 'type=xyz&url=' + tile_url + '&zmax=' + zoom_max + 'zmin=' + zoom_min + '&crs=EPSG3857',
        layer = QgsRasterLayer(
            tile_url,
            tile_name, 'wms')
        if not layer.isValid():
            return
        QgsProject.instance().addMapLayer(layer)

    def addLNIAll(self):
        items = self.dlg.myListWidget.selectedItems()
        pref_name = self.dlg.myListWidget2.selectedItems()
        pref_code = []
        for i in range(len(pref_name)):
            pref_code.append(
                jpDataUtils.getPrefCodeByName(
                    str(self.dlg.myListWidget2.selectedItems()[i].text())
                )
            )
        
        for i in range(len(items)):
            for item in self._LandNumInfo:
                if str(self.dlg.myListWidget.selectedItems()[i].text()) == item['name_j']:
                    for x in range(len(pref_code)):
                        tempShpFileName = jpDataUtils.findShpFile(
                            self._folderPath + '/' + item['code_map'], 
                            item, 
                            pref_code[x]
                        )

                        if tempShpFileName is None:
                            self.iface.messageBar().pushMessage('Error', 'Cannot find the .shp file: ' + item['shp'].replace(u'code_pref', pref_code[x]), 1, duration = 5)
                            tempShpFileName, ok = QFileDialog.getOpenFileName(
                                self.iface.mainWindow(),
                                u'Select a File', 
                                self._folderPath + '/' + item['code_map'], 
                                'ESRI Shapefile (*.shp)'
                            )

                        tempLayer = QgsVectorLayer(
                            tempShpFileName, 
                            item['name_j'] + ' (' + str(pref_name[x].text()) + ')', 
                            'ogr'
                        )
                        
                        if os.path.exists(self.plugin_dir + '/qml/' + item['code_map'] + '.qml'):
                            if tempLayer.loadNamedStyle(self.plugin_dir + '/qml/' + item['code_map'] + '.qml'):
                                tempLayer.triggerRepaint()
                        QgsProject.instance().addMapLayer(tempLayer)
                    break

    def initDownload(self, url, subFolder, zipFileName):
        if not os.path.exists(self._folderPath + '/' + subFolder):
            os.mkdir(self._folderPath + '/' + subFolder) 
        
        if not os.path.exists(self._folderPath + '/' + subFolder + '/' + zipFileName):
            self.dlg.myPushButton1.setEnabled(False)
            
            # Run the download in a new thread.
            self.downloader = Downloader(
                url,
                self._folderPath + '/' + subFolder + '/' + zipFileName
            )
            # Connect the signals which send information about the download
            # progress with the proper methods of the progress bar.
            self.downloader.setTotalProgress.connect(self.dlg.progressBar.setMaximum)
            self.downloader.setCurrentProgress.connect(self.dlg.progressBar.setValue)
            # Qt will invoke the `succeeded()` method when the file has been
            # downloaded successfully and `downloadFinished()` when the
            # child thread finishes.
            self.downloader.succeeded.connect(self.downloadSucceeded)
            self.downloader.finished.connect(self.downloadFinished)
            self.downloader.start()

    def downloadSucceeded(self):
        # Set the progress at 100%.
        self.dlg.progressBar.setValue(self.dlg.progressBar.maximum())

    def downloadFinished(self):
        # Restore the button.
        self.dlg.myPushButton1.setEnabled(True)
        # Delete the thread when no longer needed.
        del self.downloader

    def chooseFolder(self):
        # Open a folder dialog to choose a folder
        self._folderPath = QFileDialog.getExistingDirectory(
            self.iface.mainWindow(), 
            self.tr(u'Choose Folder')
        )

        if self._folderPath:
            self.dlg.myLabel1.setText(self._folderPath)
            s = QgsSettings()
            s.setValue("jpdata/FolderPath", self._folderPath)
