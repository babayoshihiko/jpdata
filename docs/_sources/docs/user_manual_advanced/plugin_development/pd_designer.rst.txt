.. index:: Plugin Development Designer
.. _pd_designer:

Designer の使い方
==================

.. only:: html

   .. contents::
      :local:

QGIS Plugin を作成する出発点は、グラフィカル・ユーザー・インフターフェイス (GUI) から始めるかと思います。

あらかじめ、紙などでこのようなウィンドウというものを作図しておきましょう。

QGIS は、Python と Qt を PyQt で繋いでいます。同様のものに PySide というものがあり、検索時に PySide も多く表示されますが、PySide のコードは動作しないことが多いので注意しましょう。

Designer
--------

QGIS のフォルダ内には、Designer というアプリケーションが入っています。

Windows の場合、@sec-win であらかじめ作っておいた designer_gui.bat をダブルクリックします。

Windows OSGeo4W: C:\\OSGeo4W\\bin\\designer_gui.bat

macOS の場合、ターミナルから open -a /Applications/QGIS-LTR.app/Contents/MacOS/Designer.app と入力します。

/Applications/QGIS-LTR.app/Contents/MacOS/Designer.app

.. figure:: img/mac_designer.gif
   :align: center

   macOS で Designer を起動する


よく使う Widget
--------------

GUI を設計する際には、Widget という言葉をよく使います。Widget とは、ボタンやテキスト入力などのパーツのことです。

LineEdit と TextEdit
^^^^^^^^^^^^^^^^^^^^^

テキスト入力フォームには、以下のように三種類あります。

lineEdit: 一行だけのシンプルなテキスト入力

.. _figure_pd_qlineedit:

.. figure:: img/windows-lineedit.png
   :align: center

   lineEdit

textEdit: 複数行で、太字なども可能

plainTextEdit: 複数行で、太字などのないシンプルなテキスト入力

QLineEdit についての参照 (バージョン６のものになります)。

[https://www.riverbankcomputing.com/static/Docs/PyQt6/api/qtwidgets/qlineedit.html](https://www.riverbankcomputing.com/static/Docs/PyQt6/api/qtwidgets/qlineedit.html)

Label
^^^^^

Label は、LineEdit などと異なり、ユーザが入力するのではないテキストです。

ListWidget
^^^^^^^^^^

List は、1 列複数行で表示する表です。ListView と ListWidget がありますが、ListWidget の方が簡単に扱うことができます。

.. _figure_pd_listview:

.. figure:: img/windows-listview.png
   :align: center

ListWidget は、複数のテキストを縦に並べて表示をし、一つを選択するように使います。ComboBox と異なる点としては、選択肢を表示する視認性と、複数選択が可能になります。

Designer では、List Widget を、ウィンドウにドラッグして配置します。この際、objectName を `myListWidget_1` などに設定します。この objectName は、 Python の中でも使います。ノートなどにメモしておきましょう。

List Widget のあるウィンドウが選択された状態で右クリック (macOS だとダブルタップや Cmd + クリック) をし、Layout が `Lay Out in a Grid` などになっていると、ウィンドウの大きさを変えた際に自動的に伸び縮みします。

各列は item と呼ばれます。Python で item を追加するには、`MyPlugin.py` の `def run(self):` を


    .. code-block:: python
      def run(self):
         ....
         self.dlg.myListWidget_1.addItem('日本')
         self.dlg.myListWidget_1.addItem('イギリス')


注: Dialogue でなく Dock の場合、`dlg` を `dockwidget`  に変えて、`self.dockwidget.myListWidget_1.addItem('日本')` とします。以下も同様です。

デフォルトでは、１列ずつしか選択することができません。以下のコードで、複数行選択が可能になります。

    .. code-block:: python

      from qgis.PyQt.QtWidgets import QAbstractItemView

      ...

         def run(self):
            ....
            self.myListWidget_1.setSelectionMode(
               QAbstractItemView.ExtendedSelection
            )


ListWidget (myListWidget) が選択されたときの処理は、Python では以下のように書きます。

    .. code-block:: python

      from qgis.PyQt.QtWidgets import QAbstractItemView

      ...

         def run(self):
            ....
            self.dockwidget.myListWidget.currentItemChanged.connect(
                self.myLW_currentItemChanged
            )
         
         def myLW_currentItemChanged(self, current, previous):

なお、この処理の中で self.dockwidget.myListWidget12.selectedItems() はまだ新しい current が反映されておらず、古い selectedItems のままです。
つまり previous と一致しています。

厳密には、型が違うので、

    .. code-block:: python

      previous == self.dockwidget.myListWidget12.selectedItems()[0].text()

ということになります。

QListWidget についての参照 (バージョン６のものになります)。

[https://www.riverbankcomputing.com/static/Docs/PyQt6/api/qtwidgets/qlistwidget.html](https://www.riverbankcomputing.com/static/Docs/PyQt6/api/qtwidgets/qlistwidget.html)

ボタン
^^^^^^

ボタンは、QPushButton と言います。

.. _figure_pd_qpushbutton:

.. figure:: img/windows-pushbutton.png
   :align: center

   QPushButton

「押された時の処理」の書き方を学んでいきましょう。

まず、Designer では `Pushu Button` をウィンドウにドラッグし、obectName を `myPushButton_1` などのように設定します。

`MyPlugin.py` に、以下のようなコードを追加します。

    .. code-block:: python

      def run(self):
         ....
         self.dlg.myPushButton_1.clicked.connect(self.ChangeButtonLabel)


さらに、`ChangeButtonLabel()` というメソッドを、同じファイルの地番下に追加します。

    .. code-block:: python

      def ChangeButtonLabel(self):
         self.dlg.myPushButton_1.setText('押された')


これで、ボタンを押されると、ボタンが「押された」と表示されます。

[https://www.riverbankcomputing.com/static/Docs/PyQt6/api/qtwidgets/qpushbutton.html](https://www.riverbankcomputing.com/static/Docs/PyQt6/api/qtwidgets/qpushbutton.html)

レイアウト
----------

デフォルトでは、ユーザがウィンドウを大きくしても、LineEdit などはその大きさに合わせて伸びてくれません。

多くの場合は、Layouts の Vertical Layout と Horizontal Layout を組み合わせてレイアウトを完成させます。

最後に、ウィンドウ全体を選択した状態で右クリックします。コンテキストメニューの一番下、Lay out > Lay Out in a Grid を選択します。

上寄せ
^^^^^^

ウィンドウのサイズが変わっても、LineEdit などを中央にせずに上寄せのままにしたい場合、Vertical Spacer を使います。

可変 splitter
^^^^^^^^^^^^^

ListWidget などを並べて、幅を可変にするには、Lay Out Horizontally in Splitter を使います。この Widget はデフォルトでは使えないグレーアウトの状態です。並べたい二つの ListWidget を選択した状態で、このボタンが有効になります。

モーダル
-------

QGIS のプラグインウィンドウは、メインウィンドウに隠れることがあります。

メインウィンドウよりも常に上にあるウィンドウをモーダルウィンドウと言います。

QGIS プラグインの場合

    .. code-block:: python

      def run(self):
         ...
         self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)


とします。

子ウィンドウ
^^^^^^^^^^^^

Designer を使い、`MyPlugin_2.ui` を作成します。

テキストエディタで、`MyPlugin_2.py` を作成します。

    .. code-block:: python

      from qgis.PyQt import QtGui, QtWidgets, uic
      import os

      FORM_CLASS, _ = uic.loadUiType(os.path.join(
         os.path.dirname(__file__), 'MyPlugin_2.ui'))

      class MyPlugin_2 (QtWidgets.QDialog, FORM_CLASS):
         def __init__(self, parent = None):
            """Constructor."""
            super(MyPlugin_2, self).__init__(parent)
            self.setupUi(self)


`MyPlugin.py` も編集します。

    .. code-block:: python

      class MyPlugin:
         """QGIS Plugin Implementation."""

         def __init__(self, iface):
            ...
            self.MyPlugin_2 = MyPlugin_2()


この後、子ウィンドウを登場させたいところに、`self.MyPlugin_2.show()` をすることで、ウィンドウが登場します。

また、子ウィンドウをモーダルにしたい場合は、前の節をご参照ください。



.. Substitutions definitions - AVOID EDITING PAST THIS LINE
   This will be automatically updated by the find_set_subst.py script.
   If you need to create a new substitution manually,
   please add it also to the substitutions.txt file in the
   source folder.

.. |checkbox| image:: /static/common/checkbox.png
   :width: 1.3em
.. |installPluginFromZip| image:: /static/common/mActionInstallPluginFromZip.png
   :width: 1.5em
.. |plugin| image:: /static/common/plugin.png
   :width: 1.5em
.. |plugin-new| image:: /static/common/plugin-new.png
   :width: 1.5em
.. |plugin-upgrade| image:: /static/common/plugin-upgrade.png
   :width: 1.5em
.. |pluginIncompatible| image:: /static/common/plugin-incompatible.png
   :width: 1.5em
.. |pluginInstalled| image:: /static/common/plugin-installed.png
   :width: 1.5em
.. |showPluginManager| image:: /static/common/mActionShowPluginManager.png
   :width: 1.5em
.. |symbologyAdd| image:: /static/common/symbologyAdd.png
   :width: 1.5em
.. |symbologyEdit| image:: /static/common/symbologyEdit.png
   :width: 1.5em
.. |symbologyRemove| image:: /static/common/symbologyRemove.png
   :width: 1.5em
.. |transformSettings| image:: /static/common/mActionTransformSettings.png
   :width: 1.5em
