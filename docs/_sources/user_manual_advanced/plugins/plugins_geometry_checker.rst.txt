.. index:: Digitizing, Topology, Geometry validity, Errors
   single: Plugins; Geometry checker

.. _geometry_checker:

ジオメトリとトポロジのチェック
==============================

ジオメトリとトポロジは、GIS の重要な概念です。
ジオメトリは、地物の形状と位置を定義し、トポロジは、地物間の空間関係を定義します。
詳細は、ベクタの章を参照してください。
QGIS には、ジオメトリとトポロジのエラーを検出および修正するための組み込みツールとプラグインが含まれています。このセクションでは、これらのツールとプラグインの使用方法について説明します。

ジオメトリをチェック
^^^^^^^^^^^^^^^^^^^^^

Geometry Checker is a powerful core plugin to check and fix the geometry
validity of a layer. It is available from the :menuselection:`Vector`
menu (|geometryChecker| :menuselection:`Check Geometries...`).

Configuring the checks
----------------------

The :guilabel:`Check Geometries` dialog shows different grouped settings in the
first tab (:guilabel:`Setup`):

* :guilabel:`Input vector layers`: to select the layers to check. A |checkbox|
  :guilabel:`Only selected features` checkbox can be used to restrict the
  checking to the geometries of the selected features.
* :guilabel:`Allowed geometry types` gives the chance to restrict the geometry
  type of the input layer(s) to:
  
  * |checkbox| Point
  * |checkbox| Multipoint
  * |checkbox| Line
  * |checkbox| Multiline
  * |checkbox| Polygon
  * |checkbox| Multipolygon

* :guilabel:`Geometry validity`. Depending on geometry types you can choose
  between:
  
  * |checkbox| :guilabel:`Self intersections` 
  * |checkbox| :guilabel:`Duplicate nodes` 
  * |checkbox| :guilabel:`Self contacts`
  * |checkbox| :guilabel:`Polygon with less than 3 nodes`.
  
* :guilabel:`Geometry properties`. Depending on geometry types, different 
  options are available:
  
  * |checkbox| :guilabel:`Polygons and multipolygons may not contain any holes`
  * |checkbox| :guilabel:`Multipart objects must consist of more than one part` 
  * |checkbox| :guilabel:`Lines must not have dangles`

* :guilabel:`Geometry conditions`. Allows you to add some condition to validate 
  the geometries with:
  
  * |checkbox| :guilabel:`Minimal segment length (map units)` |selectNumber|
  * |checkbox| :guilabel:`Minimum angle between segment (deg)` |selectNumber|
  * |checkbox| :guilabel:`Minimal polygon area (map units sqr.)` |selectNumber| 
  * |checkbox| :guilabel:`No sliver polygons` with a :guilabel:`Maximum thinness`
    |selectNumber| and a |checkbox| :guilabel:`Max. area (map units sqr.)` 
    |selectNumber| 

* :guilabel:`Topology checks`. Depending on geometry types, many different
  options are available:
  
  * |checkbox| :guilabel:`Checks for duplicates` 
  * |checkbox| :guilabel:`Checks for features within other features`
  * |checkbox| :guilabel:`Checks for overlaps smaller than` |selectNumber|
  * |checkbox| :guilabel:`Checks for gaps smaller than` |selectNumber|
  * |checkbox| :guilabel:`Points must be covered by lines` 
  * |checkbox| :guilabel:`Points must properly lie inside a polygon`
  * |checkbox| :guilabel:`Lines must not intersect any other lines` 
  * |checkbox| :guilabel:`Lines must not intersect with features of layer` 
    |selectString| 
  * |checkbox| :guilabel:`Polygons must follow boundaries of layer` |selectString|

* :guilabel:`Tolerance`. You can define the tolerance of the check in map layer
  units.
* :guilabel:`Output vector layer` gives the choice to:
  
  * |radioButtonOn| :guilabel:`Modify input layer`
  * |radioButtonOn| :guilabel:`Create new layers`

When you are happy with the configuration, you can click on the :guilabel:`Run`
button.


.. _figure_geometry_checker:

.. figure:: img/check_geometries.png
   :align: center

   The Geometry Checker Plugin


The *Geometry Checker Plugin* can find the following errors:

* Self intersections: a polygon with a self intersection
* Duplicate nodes: two duplicates nodes in a segment
* Holes: hole in a polygon
* Segment length: a segment length lower than a threshold
* Minimum angle: two segments with an angle lower than a threshold
* Minimum area: polygon area lower than a threshold
* Silver polygon: this error come from very small polygon (with small area) with
  a large perimeter
* Duplicates features
* Feature within feature
* Overlaps: polygon overlapping
* Gaps: gaps between polygons

The following figure shows the different checks made by the plugin.

.. _figure_geometry_checker_options:

.. figure:: img/geometry_checker_scheme.png
   :align: center

   Some checks supported by the plugin

Analysing the results
---------------------

The results appear in the second tab (:guilabel:`Result`) and as an overview
layer of the errors in the canvas (its name has the default prefix
:file:`checked_`).
A table lists the :guilabel:`Geometry check result` with one error per row and
columns containing: the layer name, an ID, the error type, then the coordinates
of the error, a value (depending on the type of the error) and finally the
resolution column which indicates the resolution of the error.
At the bottom of this table, you can :guilabel:`Export` the error into different file
formats. You also have a counter with the number of total errors and fixed ones.

You can select a row to see the location of the error. You can change this
behavior by selecting another action between |radioButtonOn| :guilabel:`Error`
(default), |radioButtonOff| :guilabel:`Feature`, |radioButtonOff|
:guilabel:`Don't move`, and |checkbox| :guilabel:`Highlight selected features`.

Below the zoom action when clicking on the table row, you can:

* |fromSelectedFeature| :guilabel:`Show selected features in attribute table`
* |success| :guilabel:`Fix selected errors using default resolution`
* |success| :guilabel:`Fix selected errors, prompt for resolution method`
  You will see a window to choose the resolution's method among which:

  * Merge with neighboring polygon with longest shared edge
  * Merge with neighboring polygon with largest area
  * Merge with neighboring polygon with identical attribute value, if any, or
    leave as is
  * Delete feature
  * No action

* |options| :guilabel:`Error resolution settings` allows you to change the 
  default resolution method depending on the error type

.. tip:: **Fix multiple errors**

   You can fix multiple errors by selecting more than one row in the table with
   the *CTRL + click* action.

Finally, you can choose which :guilabel:`Attribute to use when merging features
by attribute value`.



Topology Checker Plugin
^^^^^^^^^^^^^^^^^^^^^^^^

.. _figure_topology_checker:

.. figure:: img/topology_checker.png
   :align: center

   The Topology Checker Plugin

Topology describes the relationships between points, lines and polygons that
represent the features of a geographic region. With the Topology Checker plugin,
you can look over your vector files and check the topology with several topology
rules. These rules check with spatial relations whether your features 'Equal',
'Contain', 'Cover', are 'CoveredBy', 'Cross', are 'Disjoint', 'Intersect',
'Overlap', 'Touch' or are 'Within' each other. It depends on your individual
questions which topology rules you apply to your vector data (e.g., normally
you won't accept overshoots in line layers, but if they depict dead-end streets you
won't remove them from your vector layer).

QGIS has a built-in topological editing feature, which is great for creating
new features without errors. But existing data errors and user-induced errors
are hard to find. This plugin helps you find such errors through a list of rules.

To enable the :guilabel:`Topology checker` plugin:

#. Go to :guilabel:`Plugins` menu
#. Open |showPluginManager| :guilabel:`Manage and Install plugins` and choose 
   |pluginInstalled| :guilabel:`Installed`
#. Enable |checkbox| |topologyChecker| :guilabel:`Topology checker`
#. Close the :guilabel:`Plugin manager` dialog.
   A |topologyChecker| :guilabel:`Topology checker` entry is added to the 
   :guilabel:`Vector` menu.

After you enabled |topologyChecker| :guilabel:`Topology checker` 
open it and choose |options| :guilabel:`Configure` to create your topology rules.

On **point layers** the following rules are available:

* :guilabel:`Must be covered by`: Here you can choose a vector layer from your project.
  Points that aren't covered by the given vector layer occur in the 'Error' field.
* :guilabel:`Must be covered by endpoints of`: Here you can choose a line layer from your project.
* :guilabel:`Must be inside`: Here you can choose a polygon layer from your project.
  The points must be inside a polygon. Otherwise, QGIS writes an 'Error' for the point.
* :guilabel:`Must not have duplicates`: Whenever a point is represented twice or more,
  it will occur in the 'Error' field.
* :guilabel:`Must not have invalid geometries`: Checks whether the geometries are valid.
* :guilabel:`Must not have multi-part-geometries`: All multi-part points are written
  into the 'Error' field.

On **line layers**, the following rules are available:

* :guilabel:`End points must be covered by`: Here you can select a point layer from your project.
* :guilabel:`Must not have dangles`: This will show the overshoots in the line layer.
* :guilabel:`Must not have duplicates`: Whenever a line feature is represented twice or more,
  it will occur in the 'Error' field.
* :guilabel:`Must not have invalid geometries`: Checks whether the geometries are valid.
* :guilabel:`Must not have multi-part geometries`: Sometimes, a geometry is actually a
  collection of simple (single-part) geometries. Such a geometry is called
  multi-part geometry. If it contains just one type of simple geometry, we call
  it multi-point, multi-linestring or multi-polygon. All multi-part lines are
  written into the 'Error' field.
* :guilabel:`Must not have pseudos`: A line geometry's endpoint should be connected to
  the endpoints of two other geometries. If the endpoint is connected to only
  one other geometry's endpoint, the endpoint is called a pseudo node.

On **polygon layers**, the following rules are available:

* :guilabel:`Must contain`: Polygon layer must contain at least one point geometry
  from the second layer.
* :guilabel:`Must not have duplicates`: Polygons from the same layer must not have
  identical geometries. Whenever a polygon feature is represented twice or more
  it will occur in the 'Error' field.
* :guilabel:`Must not have gaps`: Adjacent polygons should not form gaps between them.
  Administrative boundaries could be mentioned as an example (US state polygons
  do not have any gaps between them...).
* :guilabel:`Must not have invalid geometries`: Checks whether the geometries are valid.
  Some of the rules that define a valid geometry are:

  * Polygon rings must close.
  * Rings that define holes should be inside rings that define exterior boundaries.
  * Rings may not self-intersect (they may neither touch nor cross one another).
  * Rings may not touch other rings, except at a point.

* :guilabel:`Must not have multi-part geometries`: Sometimes, a geometry is actually a
  collection of simple (single-part) geometries. Such a geometry is called multi-part
  geometry. If it contains just one type of simple geometry, we call it multi-point,
  multi-linestring or multi-polygon. For example, a country consisting of multiple
  islands can be represented as a multi-polygon.
* :guilabel:`Must not overlap`: Adjacent polygons should not share common area.
* :guilabel:`Must not overlap with`: Adjacent polygons from one layer should not share
  common area with polygons from another layer.

When you create a :guilabel:`New rule` click on the |symbologyAdd| :sup:`Add rule`
to include it to the :guilabel:`Current rules`.
You can enable or disable individual rules by clicking on the checkbox.
Right-clicking over a rule provides the following options:

* :guilabel:`Select All` the rules
* :guilabel:`Activate` or :guilabel:`Deactivate` the selected rules
* :guilabel:`Toggle activation` of selected rules
* :guilabel:`Delete` selected rules.
  This can also be achieved with the |symbologyRemove| :sup:`Delete selected rules` button.

Press :guilabel:`OK` and then choose from the :guilabel:`Topology checker` panel:

* |validateAll| :sup:`Validate All`: applies the active rules to all the features
  of the involved layer(s)
* or |validateExtent| :sup:`Validate Extent`: applies the active rules to the features
  of the involved layer(s), within the current map canvas.
  The button is kept pushed and the results will update as the map canvas extent changes.

Errors will show up in the table of results containing type of error, layer and feature ID.
Use :guilabel:`Filter errors by rule` menu to filter the errors to a specific error type.

Check |checkbox|:guilabel:`Show errors on the canvas` to show error location on the canvas.
Clicking a row in the table will zoom the map canvas to the concerned feature,
where you can use :ref:`QGIS digitizing tools <editingvector>` to fix the error.




.. Substitutions definitions - AVOID EDITING PAST THIS LINE
   This will be automatically updated by the find_set_subst.py script.
   If you need to create a new substitution manually,
   please add it also to the substitutions.txt file in the
   source folder.

.. |checkbox| image:: /static/common/checkbox.png
   :width: 1.3em
.. |fromSelectedFeature| image:: /static/common/mActionFromSelectedFeature.png
   :width: 1em
.. |geometryChecker| image:: /static/common/geometrychecker.png
   :width: 1.5em
.. |options| image:: /static/common/mActionOptions.png
   :width: 1em
.. |radioButtonOff| image:: /static/common/radiobuttonoff.png
   :width: 1.5em
.. |radioButtonOn| image:: /static/common/radiobuttonon.png
   :width: 1.5em
.. |selectNumber| image:: /static/common/selectnumber.png
   :width: 2.8em
.. |selectString| image:: /static/common/selectstring.png
   :width: 2.5em
.. |success| image:: /static/common/mIconSuccess.png
   :width: 1em
